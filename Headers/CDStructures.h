//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

@class NSArray, NSError, NSString;

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct ADCAxisPresentationSettings {
    double size;
    long long sizingType;
    long long position;
    _Bool adjustToSafeArea;
};

struct ADCDim {
    double _field1;
    double _field2;
};

struct ADCViewability {
    unsigned long long changeType;
    double visiblePart;
    double volume;
    long long orientation;
    struct CGRect rect;
};

struct AQBufferParameters {
    unsigned int bufferSize;
    unsigned int packetCount;
};

struct AQBufferState {
    struct AudioQueueBuffer *bufferRef;
    struct AudioTimeStamp timestamp;
    _Bool enqueued;
    double lastFramePts;
};

struct AVAsset {
    Class _field1;
    id _field2;
};

struct AVPlayer {
    Class _field1;
    id _field2;
};

struct AVPlayerItem {
    Class _field1;
    id _field2;
};

struct AVPlayerLayer {
    Class _field1;
    struct _CALayerIvars _field2;
    id _field3;
};

struct AdColonyAdSize {
    double width;
    double height;
};

struct AudioBuffer {
    unsigned int mNumberChannels;
    unsigned int mDataByteSize;
    void *mData;
};

struct AudioQueueBuffer {
    unsigned int _field1;
    void *_field2;
    unsigned int _field3;
    void *_field4;
    unsigned int _field5;
    struct AudioStreamPacketDescription *_field6;
    unsigned int _field7;
};

struct AudioQueueLevelMeterState {
    float _field1;
    float _field2;
};

struct AudioStreamBasicDescription {
    double mSampleRate;
    unsigned int mFormatID;
    unsigned int mFormatFlags;
    unsigned int mBytesPerPacket;
    unsigned int mFramesPerPacket;
    unsigned int mBytesPerFrame;
    unsigned int mChannelsPerFrame;
    unsigned int mBitsPerChannel;
    unsigned int mReserved;
};

struct AudioStreamPacketDescription {
    long long _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct AudioTimeStamp {
    double mSampleTime;
    unsigned long long mHostTime;
    double mRateScalar;
    unsigned long long mWordClockTime;
    struct SMPTETime mSMPTETime;
    unsigned int mFlags;
    unsigned int mReserved;
};

struct CATransform3D {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
};

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CGVector {
    double dx;
    double dy;
};

struct FBAdDeviceBatteryInfo {
    long long _field1;
    double _field2;
};

struct FBAdSize {
    struct CGSize size;
};

struct FNFAVSyncStatus {
    double offsetAverageSec;
    long long offsetSampleCount;
};

struct FNFDecompressionConfig {
    _Bool debuggingErrorEnabled;
    _Bool decompressionErrorOutOnceOnly;
    _Bool stopDecodingOnInvalidate;
    _Bool invalidateOnError;
    _Bool decodeFrameWithOutputHandler;
    _Bool badFrameFix;
    _Bool badFrameQuickCheck;
    _Bool refactorClosingSession;
    unsigned int recoverDecodeFrameFailureTimes;
    unsigned int maxGopStoredFrameCount;
};

struct FNFDisplayedFrameInfo {
    double presentTimestamp;
    double displayedPlayerTimestamp;
    double displayedUnixTimestamp;
};

struct FNFFrameDisplayState {
    double pts;
    double audioDisplayTime;
    double videoDisplayTime;
};

struct FNFFrameMetadata {
    unsigned int _field1;
    CDStruct_1b6d18a9 _field2;
    CDStruct_1b6d18a9 _field3;
    long long _field4;
    CDStruct_1b6d18a9 _field5;
    unsigned int _field6;
};

struct FNFMP4MoovAtomCompressed {
    struct vector<FNFMP4TrakAtomForSeek, std::__1::allocator<FNFMP4TrakAtomForSeek>> trakAtoms;
    struct FNFMP4MvhdAtom mvhdAtom;
};

struct FNFMP4MvhdAtom {
    unsigned int timescale;
    unsigned int duration;
    float rotationAngle;
};

struct FNFMP4TrakAtomForSeek;

struct FNFMpdConfig {
    _Bool _field1;
};

struct FNFPlayerInternalState {
    _Bool playingRequested;
    _Bool isPlaying;
    _Bool endTimeReached;
    _Bool firstAudioFrameEnqueued;
    _Bool stoppedEnqueuingVideo;
    _Bool stoppedEnqueuingAudio;
    _Bool isFirstVideoFrame;
    _Bool recreatedLayerOnError;
    _Bool audioEngineInitialized;
    _Bool isReadyForDisplay;
    _Bool previousSeekCompletionBlockExecuted;
    _Bool muted;
    _Bool showCaptions;
    CDStruct_1b6d18a9 lastStartingTime;
    CDStruct_1b6d18a9 lastRequestedStartTime;
    CDStruct_1b6d18a9 lastRequestedMuteTime;
    CDStruct_1b6d18a9 latestEnqueuedVideoPts;
    CDStruct_1b6d18a9 latestEnqueuedAudioPts;
    CDStruct_1b6d18a9 latestEnqueuedAudioDts;
    float lastPlayRate;
    CDStruct_1b6d18a9 lastSeekToTime;
    float playRate;
    id playbackTimeObserverForAsset;
    id durationTimerForAsset;
    id stallTimerObserver;
    id seekFrameUpdateObserver;
    id sampleBufferFlushTimerObserver;
    id levelMeterTimerObserver;
    CDStruct_1b6d18a9 backgroundPauseTime;
    unsigned int sampleAudioFrameSize;
    NSString *representationId;
    unsigned long long lastFrameSeekAttempt;
    long long status;
    struct FNFPlayerStallState stallState;
    struct FNFPlayerSeekState seekState;
    int pauseReason;
    struct CGRect bounds;
    CDUnknownBlockType frameSeekCompletionBlock;
    id loggingContext;
    NSString *lastRequestedMuteVideoId;
    NSError *playerItemWarning;
    NSError *playerItemError;
    NSArray *playerItemLoadedTimeRanges;
    CDStruct_1b6d18a9 playerItemDuration;
    struct FNFFrameDisplayState frameDisplayState;
    struct FNFAVSyncStatus avSync;
    struct FNFDisplayedFrameInfo displayedFrameInfo;
};

struct FNFPlayerSeekState {
    _Bool seekFinished;
    int seekReason;
};

struct FNFPlayerStallState {
    _Bool isStalled;
    _Bool isStartStall;
    unsigned long long stallStartPositionTimeInMilliseconds;
};

struct FNFSeekStatus {
    _Bool _field1;
    CDStruct_1b6d18a9 _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    unsigned long long _field6;
    unsigned long long _field7;
};

struct GolfContactListener {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct vector<MyContact3123, std::__1::allocator<MyContact3123>> _field3;
};

struct GolfContactListener2 {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct vector<MyContact31231, std::__1::allocator<MyContact31231>> _field3;
};

struct KnockContactListener {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct vector<MyContact3, std::__1::allocator<MyContact3>> _field3;
};

struct MyContact;

struct MyContact2;

struct MyContact233;

struct MyContact3;

struct MyContact312;

struct MyContact3123;

struct MyContact31231;

struct MyContact33;

struct MyContact333;

struct MyContact4;

struct MyContact6;

struct NSDictionary {
    Class _field1;
};

struct NSMutableArray {
    Class _field1;
};

struct NSMutableDictionary {
    Class _field1;
};

struct NSMutableSet {
    Class _field1;
};

struct PoolContactListener {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct vector<MyContact, std::__1::allocator<MyContact>> _field3;
};

struct PoolContactListener2 {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct vector<MyContact4, std::__1::allocator<MyContact4>> _field3;
};

struct PoolContactListener3 {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct vector<MyContact333, std::__1::allocator<MyContact333>> _field3;
};

struct PoolGhostContactListener {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct vector<MyContact2, std::__1::allocator<MyContact2>> _field3;
};

struct PoolGhostContactListener2 {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct vector<MyContact6, std::__1::allocator<MyContact6>> _field3;
};

struct PoolGhostContactListener3 {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct vector<MyContact233, std::__1::allocator<MyContact233>> _field3;
};

struct SCNVector3 {
    float x;
    float y;
    float z;
};

struct SMPTETime {
    short mSubframes;
    short mSubframeDivisor;
    unsigned int mCounter;
    unsigned int mType;
    unsigned int mFlags;
    short mHours;
    short mMinutes;
    short mSeconds;
    short mFrames;
};

struct ShuffleContactListener {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct vector<MyContact312, std::__1::allocator<MyContact312>> _field3;
};

struct Sound;

struct TanksContactListener {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct vector<MyContact33, std::__1::allocator<MyContact33>> _field3;
};

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct _CALayerIvars {
    int _field1;
    unsigned int _field2;
    void *_field3;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct _fnf_avc1_frame_check_t {
    _Bool success;
    _Bool isKeyframe;
    int naluCount;
};

struct _fnf_avc1_frame_sanity_t {
    struct _fnf_avc1_frame_check_t _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct b2Block;

struct b2BlockAllocator {
    struct b2Chunk *_field1;
    int _field2;
    int _field3;
    struct b2Block *_field4[14];
};

struct b2Body {
    int _field1;
    unsigned short _field2;
    int _field3;
    struct b2Transform _field4;
    struct b2Sweep _field5;
    struct b2Vec2 _field6;
    float _field7;
    struct b2Vec2 _field8;
    float _field9;
    struct b2World *_field10;
    struct b2Body *_field11;
    struct b2Body *_field12;
    struct b2Fixture *_field13;
    int _field14;
    struct b2JointEdge *_field15;
    struct b2ContactEdge *_field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    void *_field25;
};

struct b2BroadPhase {
    struct b2DynamicTree _field1;
    int _field2;
    int *_field3;
    int _field4;
    int _field5;
    struct b2Pair *_field6;
    int _field7;
    int _field8;
    int _field9;
};

struct b2Chunk;

struct b2CircleShape {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    float _field3;
    struct b2Vec2 _field4;
};

struct b2Contact;

struct b2ContactEdge;

struct b2ContactFilter;

struct b2ContactListener;

struct b2ContactManager {
    struct b2BroadPhase _field1;
    struct b2Contact *_field2;
    int _field3;
    struct b2ContactFilter *_field4;
    struct b2ContactListener *_field5;
    struct b2BlockAllocator *_field6;
};

struct b2DestructionListener;

struct b2Draw;

struct b2DynamicTree {
    int _field1;
    struct b2TreeNode *_field2;
    int _field3;
    int _field4;
    int _field5;
    unsigned int _field6;
    int _field7;
};

struct b2EdgeShape {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    float _field3;
    struct b2Vec2 _field4;
    struct b2Vec2 _field5;
    struct b2Vec2 _field6;
    struct b2Vec2 _field7;
    _Bool _field8;
    _Bool _field9;
};

struct b2Filter {
    unsigned short _field1;
    unsigned short _field2;
    short _field3;
};

struct b2Fixture {
    float _field1;
    struct b2Fixture *_field2;
    struct b2Body *_field3;
    struct b2Shape *_field4;
    float _field5;
    float _field6;
    struct b2FixtureProxy *_field7;
    int _field8;
    struct b2Filter _field9;
    _Bool _field10;
    void *_field11;
};

struct b2FixtureDef {
    struct b2Shape *_field1;
    void *_field2;
    float _field3;
    float _field4;
    float _field5;
    _Bool _field6;
    struct b2Filter _field7;
};

struct b2FixtureProxy;

struct b2Joint;

struct b2JointEdge;

struct b2Pair;

struct b2PolygonShape {
    CDUnknownFunctionPointerType *_vptr$b2Shape;
    int m_type;
    float m_radius;
    struct b2Vec2 m_centroid;
    struct b2Vec2 m_vertices[8];
    struct b2Vec2 m_normals[8];
    int m_count;
};

struct b2Profile {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
};

struct b2Rot {
    float _field1;
    float _field2;
};

struct b2Shape;

struct b2StackAllocator {
    char _field1[102400];
    int _field2;
    int _field3;
    int _field4;
    struct b2StackEntry _field5[32];
    int _field6;
};

struct b2StackEntry {
    char *_field1;
    int _field2;
    _Bool _field3;
};

struct b2Sweep {
    struct b2Vec2 _field1;
    struct b2Vec2 _field2;
    struct b2Vec2 _field3;
    float _field4;
    float _field5;
    float _field6;
};

struct b2Transform {
    struct b2Vec2 _field1;
    struct b2Rot _field2;
};

struct b2TreeNode;

struct b2Vec2 {
    float x;
    float y;
};

struct b2World {
    struct b2BlockAllocator _field1;
    struct b2StackAllocator _field2;
    int _field3;
    struct b2ContactManager _field4;
    struct b2Body *_field5;
    struct b2Joint *_field6;
    int _field7;
    int _field8;
    struct b2Vec2 _field9;
    _Bool _field10;
    struct b2DestructionListener *_field11;
    struct b2Draw *_field12;
    float _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    struct b2Profile _field18;
};

struct function<void (_xmlNode *)> {
    struct __value_func<void (_xmlNode *)> {
        struct type _field1;
        struct __base<void (_xmlNode *)> *_field2;
    } _field1;
};

struct in_addr {
    unsigned int _field1;
};

struct internal_state;

struct map<FBDataSegment, NSData *, cmpOfDataSegment, std::__1::allocator<std::__1::pair<const FBDataSegment, NSData *>>> {
    struct __tree<std::__1::__value_type<FBDataSegment, NSData *>, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true>, std::__1::allocator<std::__1::__value_type<FBDataSegment, NSData *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBDataSegment, NSData *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned long long, opaqueCMSampleBuffer *, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, opaqueCMSampleBuffer *>>> {
    struct __tree<std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *>, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *>, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *>, std::__1::less<unsigned long long>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct node {
    struct _xmlNode *_field1;
    struct function<void (_xmlNode *)> _field2;
};

struct pair<double, double>;

struct recursive_mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct shared_ptr<chameleon::Sound> {
    struct Sound *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<void>;

struct sockaddr {
    unsigned char _field1;
    unsigned char _field2;
    char _field3[14];
};

struct sockaddr_in {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    struct in_addr _field4;
    char _field5[8];
};

struct tuple<unsigned long long, opaqueCMSampleBuffer *>;

struct type {
    unsigned char _field1[24];
};

struct vector<FNFMP4TrakAtomForSeek, std::__1::allocator<FNFMP4TrakAtomForSeek>> {
    struct FNFMP4TrakAtomForSeek *__begin_;
    struct FNFMP4TrakAtomForSeek *__end_;
    struct __compressed_pair<FNFMP4TrakAtomForSeek *, std::__1::allocator<FNFMP4TrakAtomForSeek>> {
        struct FNFMP4TrakAtomForSeek *__value_;
    } __end_cap_;
};

struct vector<MyContact, std::__1::allocator<MyContact>> {
    struct MyContact *_field1;
    struct MyContact *_field2;
    struct __compressed_pair<MyContact *, std::__1::allocator<MyContact>> {
        struct MyContact *_field1;
    } _field3;
};

struct vector<MyContact2, std::__1::allocator<MyContact2>> {
    struct MyContact2 *_field1;
    struct MyContact2 *_field2;
    struct __compressed_pair<MyContact2 *, std::__1::allocator<MyContact2>> {
        struct MyContact2 *_field1;
    } _field3;
};

struct vector<MyContact233, std::__1::allocator<MyContact233>> {
    struct MyContact233 *_field1;
    struct MyContact233 *_field2;
    struct __compressed_pair<MyContact233 *, std::__1::allocator<MyContact233>> {
        struct MyContact233 *_field1;
    } _field3;
};

struct vector<MyContact3, std::__1::allocator<MyContact3>> {
    struct MyContact3 *_field1;
    struct MyContact3 *_field2;
    struct __compressed_pair<MyContact3 *, std::__1::allocator<MyContact3>> {
        struct MyContact3 *_field1;
    } _field3;
};

struct vector<MyContact312, std::__1::allocator<MyContact312>> {
    struct MyContact312 *_field1;
    struct MyContact312 *_field2;
    struct __compressed_pair<MyContact312 *, std::__1::allocator<MyContact312>> {
        struct MyContact312 *_field1;
    } _field3;
};

struct vector<MyContact3123, std::__1::allocator<MyContact3123>> {
    struct MyContact3123 *_field1;
    struct MyContact3123 *_field2;
    struct __compressed_pair<MyContact3123 *, std::__1::allocator<MyContact3123>> {
        struct MyContact3123 *_field1;
    } _field3;
};

struct vector<MyContact31231, std::__1::allocator<MyContact31231>> {
    struct MyContact31231 *_field1;
    struct MyContact31231 *_field2;
    struct __compressed_pair<MyContact31231 *, std::__1::allocator<MyContact31231>> {
        struct MyContact31231 *_field1;
    } _field3;
};

struct vector<MyContact33, std::__1::allocator<MyContact33>> {
    struct MyContact33 *_field1;
    struct MyContact33 *_field2;
    struct __compressed_pair<MyContact33 *, std::__1::allocator<MyContact33>> {
        struct MyContact33 *_field1;
    } _field3;
};

struct vector<MyContact333, std::__1::allocator<MyContact333>> {
    struct MyContact333 *_field1;
    struct MyContact333 *_field2;
    struct __compressed_pair<MyContact333 *, std::__1::allocator<MyContact333>> {
        struct MyContact333 *_field1;
    } _field3;
};

struct vector<MyContact4, std::__1::allocator<MyContact4>> {
    struct MyContact4 *_field1;
    struct MyContact4 *_field2;
    struct __compressed_pair<MyContact4 *, std::__1::allocator<MyContact4>> {
        struct MyContact4 *_field1;
    } _field3;
};

struct vector<MyContact6, std::__1::allocator<MyContact6>> {
    struct MyContact6 *_field1;
    struct MyContact6 *_field2;
    struct __compressed_pair<MyContact6 *, std::__1::allocator<MyContact6>> {
        struct MyContact6 *_field1;
    } _field3;
};

struct vector<int, std::__1::allocator<int>> {
    int *__begin_;
    int *__end_;
    struct __compressed_pair<int *, std::__1::allocator<int>> {
        int *__value_;
    } __end_cap_;
};

struct vector<std::__1::pair<double, double>, std::__1::allocator<std::__1::pair<double, double>>> {
    struct pair<double, double> *__begin_;
    struct pair<double, double> *__end_;
    struct __compressed_pair<std::__1::pair<double, double>*, std::__1::allocator<std::__1::pair<double, double>>> {
        struct pair<double, double> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<void>, std::__1::allocator<std::__1::shared_ptr<void>>> {
    struct shared_ptr<void> *__begin_;
    struct shared_ptr<void> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<void>*, std::__1::allocator<std::__1::shared_ptr<void>>> {
        struct shared_ptr<void> *__value_;
    } __end_cap_;
};

struct vector<std::__1::tuple<unsigned long long, opaqueCMSampleBuffer *>, std::__1::allocator<std::__1::tuple<unsigned long long, opaqueCMSampleBuffer *>>> {
    struct tuple<unsigned long long, opaqueCMSampleBuffer *> *__begin_;
    struct tuple<unsigned long long, opaqueCMSampleBuffer *> *__end_;
    struct __compressed_pair<std::__1::tuple<unsigned long long, opaqueCMSampleBuffer *>*, std::__1::allocator<std::__1::tuple<unsigned long long, opaqueCMSampleBuffer *>>> {
        struct tuple<unsigned long long, opaqueCMSampleBuffer *> *__value_;
    } __end_cap_;
};

struct vector<unsigned long long, std::__1::allocator<unsigned long long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

struct z_stream_s {
    char *next_in;
    unsigned int avail_in;
    unsigned long long total_in;
    char *next_out;
    unsigned int avail_out;
    unsigned long long total_out;
    char *msg;
    struct internal_state *state;
    CDUnknownFunctionPointerType zalloc;
    CDUnknownFunctionPointerType zfree;
    void *opaque;
    int data_type;
    unsigned long long adler;
    unsigned long long reserved;
};

#pragma mark Typedef'd Structures

typedef struct {
    id _field1;
    id _field2;
} CDStruct_a70f6672;

typedef struct {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    unsigned int _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    _Bool _field21;
    int _field22;
    _Bool _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
    _Bool _field28;
    _Bool _field29;
    double _field30;
    _Bool _field31;
    int _field32;
    int _field33;
    double _field34;
    double _field35;
} CDStruct_3074ab86;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
} CDStruct_f5505163;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
} CDStruct_4bcfbbae;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    double noAudioThreshold;
    _Bool useLastFramePts;
    int avSyncThresholdMs;
    int avSyncMinSampleSize;
    double avSyncPassRate;
} CDStruct_796a5863;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    _Bool _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    _Bool _field14;
} CDStruct_a75a4725;

typedef struct {
    double x;
    double y;
    double z;
} CDStruct_31142d93;

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

typedef struct {
    long long _field1;
    long long _field2;
} CDStruct_912cb5d2;

typedef struct {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    int _field5;
    unsigned int _field6;
    int _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    struct FNFDecompressionConfig _field16;
    _Bool _field17;
    _Bool _field18;
} CDStruct_9d9e2dd0;

typedef struct {
    _Bool _field1;
    struct CGRect _field2;
    id _field3;
    id _field4;
    id _field5;
} CDStruct_e20a7ae3;

// Template types
typedef struct shared_ptr<chameleon::Sound> {
    struct Sound *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_352a3a4b;

typedef struct vector<std::__1::pair<double, double>, std::__1::allocator<std::__1::pair<double, double>>> {
    struct pair<double, double> *__begin_;
    struct pair<double, double> *__end_;
    struct __compressed_pair<std::__1::pair<double, double>*, std::__1::allocator<std::__1::pair<double, double>>> {
        struct pair<double, double> *__value_;
    } __end_cap_;
} vector_63c28b85;

